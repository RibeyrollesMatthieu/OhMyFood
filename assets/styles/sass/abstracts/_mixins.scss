@use './colors' as colors;
@use './spacings' as spacings;
@use './typography' as typo;

@mixin unstyled-button() {
  border: none;
  background-color: inherit;
  outline: none;
  cursor: pointer;
}

@mixin ul-list-item($bg) {
  background: $bg;
  box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px;
  border-radius: spacings.$spacing-400;
  padding: spacings.$spacing-400;
}

@mixin ol-list-item($index) {
  @include ul-list-item(colors.$background-medium);
  font-weight: 500;
  position: relative;

  &::before {
    content: $index;
    position: absolute;
    left: 0;
    top: 50%;
    transform: translate(-50%, -50%);
    background-color: colors.$primary;
    width: 1.5rem;
    height: 1.5rem;
    color: colors.$text-light;
    border-radius: 100vmax;
    text-align: center;
  }
}

@mixin restaurant-items-appear(
  $sections,
  $elements_per_section,
  $appear_duration
) {
  @keyframes appear {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  /* FIXME: issue on 4,3,3 (prob. when not all the same values)  */
  @for $i from 1 through $sections {
    .restaurant-meals:nth-of-type(#{$i}) {
      animation: appear
        1s
        calc(
          calc($i * nth($elements_per_section, $i) * $appear-duration) +
            calc($i * $appear-duration)
            /* $i => $n for elements instead of menus */
        )
        1
        forwards;

      // @for $n from 1 through nth($elements_per_section, $i) {
      //   .restaurant-meals__list-element:nth-child(#{$n}) {
      //     animation: appear
      //       1s
      //       calc(
      //         calc($i * nth($elements_per_section, $i) * $appear-duration) +
      //           calc($n * $appear-duration)
      //       )
      //       1
      //       forwards;
      //   }
      // }
    }
  }
}
